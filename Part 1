# How to drop columns that you don't want
>>> to_drop = ['Edition Statement',
...            'Corporate Author',
...            'Corporate Contributors',
...            'Former owner',
...            'Engraver',
...            'Contributors',
...            'Issuance type',
...            'Shelfmarks']

>>> df.drop(to_drop, inplace=True, axis=1)

# How to change the data/variable type of a variable/column
5 variable types 
1) Numbers - numeric values - 4 numeric data types
  1a) int (signed integers) (no decimals)
  1b) long (long integers) (L on the end)
  1c) float (floating point real values) (can include decimals)
  1d) complex (complex numbers) (includes imaginary number as j)
2) String (continuous characters represented in quotation marks, single or double quotations)
  - subsets of strings can be made using the slice operator [] or [:]
    with index starting at 0 and working there way from -1 at the end.
3) List (items separated by commas and within brackets [], items can be different data types)
  - lists use the slice operator [] or [:]
  - lists can be concatenated using +
  - ilsts can be duplicated using *
4) Tuple (items separated by commas and within (), can't be changed similar to read-only)
5) Dictionary (items separated by commas and within {} )
  - values can be assigned and accessed using []
How to Change variable types
1 - int(x [,base]) - converts x to integer
2 - long(x [,base]) - converts x to long 
3 - float(x) - converts x to float
4 - complex(real [,imag]) - creates an complex number
5 - str(x) - converts x to string
6 - repr(x) - converts x to expression string
7 - eval(str) - evaluates a string and returns an object
8 - tuple(s) - converts s to a tuple
9 - list(s) - converts s to a list
10 - set(s) - converts s to a set
11 - dict(d) - creates a dictionary d
12 - frozenset(s) - converts s to a frozen set
13 - chr(x) - converts integer to a character
14 - unichr(x) - converts an integer into a unicode character
15 - ord(x) - converts a single character to its integer value
16 - hex(x) - converts an integer into a hexidecimal string
17 - oct(x) - converts an integer to an octal string


# How to identify NaN (Null) empty cells
Count the Null Columns
  null_columns = df.columns[df.isnull().any()]
  df[null_columns].isnull().any()
Print(Show) all rows that have any NaN/null values
  print(df[df.isnull().any(axis=1)][null_columns].head())
Print(Show) all rows that have NaN/null values for a specified column/variable
  print(df[df["column_name"].isnull()][null_columns])
# How to remove unwanted rows
df.drop(['row_id', 'row_id']) - drops rows
df.drop('column_id', axis=1) - drops columns
df[df.column_name != 'Value' ] - creates new data frame without the rows with 'Value' in the specified column
df.drop(df.index[2]) - drops row #3
df.drop(df.index[2,4]) - drops a range of rows
df.drop(df.index[-2]) - drops relative to the bottom row
df[:3] - keeps top 3 rows
df[:-3] - drops bottom 3 rows
# How to replace NaN (Null) empty cells with another value (mean, median, mode, etc)
df["column_name"].fillna("fill_value", inplace=True)

# How to identify the distribution of a column/variable
  - use a scatter plot of the specified independent variable against the dependent variable
  - can use a percentile plot
# How to identify outliers of a column/variable
  - can use a box plot
  - can use a percentile plot
# How to cap outliers
1) Percentile capping
for col in df.columns:
    percentiles = df[col].quantile([0.01,0.99]).values
    df[col][df[col] <= percentiles[0]] = percentiles[0]
    df[col][df[col] >= percentiles[1]] = percentiles[1]
2) If Else capping
  x = column
  if x > threshold:
    value
  else:
    x
# Can remove rows with outliers

# How to make sure all values in a variable/column are appropriate (numbers, characters, spelling, etc)
df.describe() - provides count, mean, sd, and percentiles of a column
df.column_name.unique()
# How to correct these errors

# How to identify leading spaces or ending spaces that shouldn't be there
df['column_name'] = df['column_name'].str.strip() - removes leading and ending spaces
df['column_name'] = df['column_name'].str.replace(" ","") - removes all spaces

# How to identify duplicate rows of data
df["is_duplicate"] = df.duplicated() - adds column with TRUE/FALSE where TRUE for duplicate rows
df.drop_duplicates(keep=FALSE, inplace=TRUE) - removes all duplicate rows
df.drop_duplicates(subset='column_name', keep=FALSE, inplace=TRUE) - removes rows with duplicates in specified column

# Correct for the appropriate number of characters for the given variable/column
df = df.rename(columns = {"original_column_name":"new_column_name"}) - renames the column

# Change text values to appropriate lower or upper case
df.column_name.lower() - makes column lower case
df.column_name.upper() - makes column upper case

# Spell check
